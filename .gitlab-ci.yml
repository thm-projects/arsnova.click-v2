stages:
  - install
  - test
  - analyze
  - build
  - deploy

.build_template: &build_template
  stage: build
  services:
    - name: docker:19.03.1-dind
      alias: docker
  variables:
    DOCKER_TLS_CERTDIR: ""
  tags:
    - docker-compose
  dependencies: []
  cache: {}
  artifacts:
    expire_in: 2 mins
    paths:
      - variables
      - private_key

.docker_push_template: &docker_push |
  docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  docker-compose build $CI_COMMIT_REF_NAME
  docker push "$CI_IMAGE_NAME:$VERSION"

.staging_server_env_template: &staging_server_env |
  echo "export CI_CONTAINER_INSTANCE_NAME=$CI_CONTAINER_INSTANCE_NAME" >> variables
  echo "export SSH_URL=$STAGING_FRONTEND_URL" >> variables
  echo "export SSH_CMD=$STAGING_SSH" >> variables
  echo "export VERSION=$VERSION" >> variables
  echo "export SERVICE_NAME=$SERVICE_NAME" >> variables
  echo "$STAGING_SSH_PRIVATE_KEY" >> private_key

.production_server_env_template: &production_server_env |
  echo "export CI_CONTAINER_INSTANCE_NAME=$CI_CONTAINER_INSTANCE_NAME" >> variables
  echo "export SSH_URL=$PRODUCTION_FRONTEND_URL" >> variables
  echo "export SSH_CMD=$PRODUCTION_SSH" >> variables
  echo "export VERSION=$VERSION" >> variables
  echo "export SERVICE_NAME=$SERVICE_NAME" >> variables
  echo "$PRODUCTION_SSH_PRIVATE_KEY" >> private_key

.server_deploy_template: &server_deploy |
  source variables
  eval $(ssh-agent -s)
  mkdir ~/.ssh
  ssh-keyscan "$SSH_URL" >> ~/.ssh/known_hosts
  ssh-add <(cat private_key)

build_master:
  <<: *build_template
  only:
    - master
  environment:
    name: Master
  variables:
    VERSION: 2.0.0
    SERVICE_NAME: master
    CI_CONTAINER_INSTANCE_NAME: arsnova-click-frontend-master
  script:
    - *production_server_env
    - *docker_push

build_staging:
  <<: *build_template
  only:
    - staging
  environment:
    name: Staging
  variables:
    VERSION: 2.0.0-staging
    SERVICE_NAME: staging
    CI_CONTAINER_INSTANCE_NAME: arsnova-click-frontend-staging
  script:
    - *staging_server_env
    - *docker_push

ts_lint:
  stage: test
  tags:
    - nodejs
  script:
    - npm install
    - echo "------------" && echo && echo "Temporary fix Mousetrap Instance Issue" && echo && echo && echo "REMOVE AFTER PACKAGE MAINTAINER HAS MERGED THE FIX" && echo && echo "------------"
    - sed -i "s|import 'mousetrap';|import { MousetrapInstance } from 'mousetrap';|g" "node_modules/angular2-hotkeys/lib/hotkeys.service.d.ts"
    - node_modules/tslint/bin/tslint -c tslint.json -p tsconfig.json

i18n_check:
  stage: test
  tags:
    - meteor
  script:
    - node src/i18n-check.js

npm_test:
  stage: test
  tags:
    - nodejs
    - angular
  artifacts:
    paths:
      - .lcov_output
  script:
    - curl -sS -o - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add
    - echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list
    - apt-get -y update
    - apt-get -y install --allow-unauthenticated google-chrome-stable
    - npm install
    - echo "------------" && echo && echo "Temporary fix Mousetrap Instance Issue" && echo && echo && echo "REMOVE AFTER PACKAGE MAINTAINER HAS MERGED THE FIX" && echo && echo "------------"
    - sed -i "s|import 'mousetrap';|import { MousetrapInstance } from 'mousetrap';|g" "node_modules/angular2-hotkeys/lib/hotkeys.service.d.ts"
    - npm test

sonarqube:
  stage: analyze
  tags:
    - sonar-cli
  dependencies:
    - npm_test
  only:
    - staging
  script:
    - npm i
    - sonar-scanner -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=https://scm.thm.de/sonar/

deploy_staging:
  stage: deploy
  only:
    - staging
  needs:
    - job: build_staging
      optional: true
  tags:
    - ssh
  script:
    - *server_deploy
    - ssh $SSH_CMD "docker pull $CI_IMAGE_NAME:$VERSION && docker rm -f $CI_CONTAINER_INSTANCE_NAME ; docker-compose -f /home/arsnova/arsnova-click-docker/docker-compose-frontend.yml -p arsnova-click-frontend up --no-deps -d $SERVICE_NAME && docker image prune -af"

deploy_master:
  stage: deploy
  only:
    - master
  needs: ["build_master"]
  tags:
    - ssh
  script:
    - *server_deploy
    - ssh $SSH_CMD "docker pull $CI_IMAGE_NAME:$VERSION && docker rm -f $CI_CONTAINER_INSTANCE_NAME ; docker-compose -f /root/docker-compose.yml up --no-deps -d frontend && docker image prune -af"
